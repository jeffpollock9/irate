#+TITLE: irate

[[https://travis-ci.com/jeffpollock9/irate][https://travis-ci.com/jeffpollock9/irate.svg?branch=master]]

A C++17 library for iterating over C++ containers.

* why?

This project is mainly for learning purposes - if you need this sort of
functionallity then you should consider using [[https://github.com/ryanhaining/cppitertools][cppitertools]] or [[https://github.com/ericniebler/range-v3][range-v3]].

* install

irate is header only so you can simply copy the include folder into your own
project. Alternatively you can install irate somewhere via the install target
and pick up the irate cmake config file which exports the cmake target
~irate::irate~.

* functionallity

** zip

Allows iterating over any number of containers simultaneously. Iteration will
stop upon reaching the end of the shortest container:

#+BEGIN_SRC C++ :exports both :flags "-std=c++17 -I$HOME/workspace/irate/install/include"
  #include <irate/zip.hpp>

  #include <iostream>
  #include <list>
  #include <vector>

  int main()
  {
      const std::vector vec{1.0, 20.0, 3.0, 4.0, 42.0, 100.0, 42.0};
      const std::list lst{'i', 'r', 'a', 't', 'e'};

      for (auto [v, l] : irate::zip(vec, lst))
      {
          std::cout << v << ", " << l << "\n";
      }

      return 0;
  }
#+END_SRC

#+RESULTS:
|  1 | i |
| 20 | r |
|  3 | a |
|  4 | t |
| 42 | e |

** enumerate

Iterate over a single container along with an index which may start at any value
(~enumerate(x, start)~) or from 0 by default (~enumerate(x)~):

#+BEGIN_SRC C++ :exports both :flags "-std=c++17 -I$HOME/workspace/irate/install/include"
  #include <irate/enumerate.hpp>

  #include <iostream>
  #include <vector>

  int main()
  {
      const std::vector vec{42.0, 666.0, 3.14};

      for (auto [ix, val] : irate::enumerate(vec, 10))
      {
          std::cout << ix << ", " << val << "\n";
      }

      return 0;
  }
#+END_SRC

#+RESULTS:
| 10 |   42 |
| 11 |  666 |
| 12 | 3.14 |

** range

As in python, ~range(end)~, ~range(begin, end)~, and ~range(begin, end, step)~ are
supported. In the simplest case:

#+BEGIN_SRC C++ :exports both :flags "-std=c++17 -I$HOME/workspace/irate/install/include"
  #include <irate/range.hpp>

  #include <iostream>

  int main()
  {
      for (auto ix : irate::range(5))
      {
          std::cout << ix << "\n";
      }

      return 0;
  }
#+END_SRC

#+RESULTS:
| 0 |
| 1 |
| 2 |
| 3 |
| 4 |

** product

Cartesian product of iterables:

#+BEGIN_SRC C++ :exports both :flags "-std=c++17 -I$HOME/workspace/irate/install/include"
  #include <irate/product.hpp>

  #include <iostream>
  #include <list>
  #include <vector>

  int main()
  {
      const std::vector vec{-10.0, 10.0, 100.0};
      const std::list lst{"foo", "bar"};

      for (auto [v, l] : irate::product(vec, lst))
      {
          std::cout << v << ", " << l << "\n";
      }

      return 0;
  }
#+END_SRC

#+RESULTS:
| -10 | foo |
| -10 | bar |
|  10 | foo |
|  10 | bar |
| 100 | foo |
| 100 | bar |

* testing

irate uses [[https://github.com/catchorg/Catch2][catch2]] for unit testing. To build and run the tests pass
~-DIRATE_TEST=ON~ to the ~cmake~ command then you can build the tests with ~make~ and
run them with ~ctest~ or by running the test binaries in ~build/test~.

* benchmarks

A simple benchmark can be built by adding the cmake variable
~-DIRATE_BENCHMARK=ON~. It requires [[https://github.com/google/benchmark][google benchmark]] and [[https://github.com/ericniebler/range-v3][range-v3]] to be installed
somewhere. If they are installed in a non-standard location (i.e. not
~/usr/local~) then you can pass their install location to cmake using
~CMAKE_PREFIX_PATH~.

On my laptop configuring with:

#+BEGIN_SRC shell :noeval
  cmake path/to/irate -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++-8 -DCMAKE_CXX_FLAGS=-march=native -DIRATE_BENCHMARK=ON
#+END_SRC

the benchmark results are:

#+BEGIN_SRC shell :exports both :results org
  ~/workspace/irate/release/benchmark/zip_benchmark --benchmark_color=false
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
---------------------------------------------------------------------------
Benchmark                    Time           CPU Iterations UserCounters...
---------------------------------------------------------------------------
fixture/BM_irate            43 ns         43 ns   13168336 test=5.67854
fixture/BM_range_v3         40 ns         40 ns   17528121 test=5.67854
fixture/BM_loop             40 ns         40 ns   17669288 test=5.67854
#+END_SRC

#+BEGIN_SRC shell :exports both :results org
  ~/workspace/irate/release/benchmark/product_benchmark --benchmark_color=false
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
---------------------------------------------------------------------------
Benchmark                    Time           CPU Iterations UserCounters...
---------------------------------------------------------------------------
fixture/BM_irate          1313 ns       1313 ns     529151 test=-251.067
fixture/BM_range_v3       1297 ns       1297 ns     534578 test=-251.067
fixture/BM_loop           1333 ns       1333 ns     525838 test=-251.067
#+END_SRC

#+BEGIN_SRC shell :exports both :results org
  ~/workspace/irate/release/benchmark/enumerate_benchmark --benchmark_color=false
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
---------------------------------------------------------------------------
Benchmark                    Time           CPU Iterations UserCounters...
---------------------------------------------------------------------------
fixture/BM_irate            38 ns         38 ns   18619063 test=-48.0793
fixture/BM_range_v3         38 ns         38 ns   18650543 test=-48.0793
fixture/BM_loop             28 ns         28 ns   24786376 test=-48.0793
#+END_SRC

#+BEGIN_SRC shell :exports both :results org
  ~/workspace/irate/release/benchmark/range_benchmark --benchmark_color=false
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
---------------------------------------------------------------------------
Benchmark                    Time           CPU Iterations UserCounters...
---------------------------------------------------------------------------
fixture/BM_irate           254 ns        254 ns    2695342 test=4.95k
fixture/BM_range_v3        253 ns        253 ns    2760855 test=4.95k
fixture/BM_loop            254 ns        254 ns    2756940 test=4.95k
#+END_SRC
